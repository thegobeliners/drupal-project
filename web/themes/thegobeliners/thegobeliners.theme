<?php

use \Drupal\Core\Form\FormStateInterface;

/**
 * Implements template_preprocess_html().
 */
function thegobeliners_preprocess_html(&$variables)
{
    $theme = \Drupal::theme()->getActiveTheme()->getName();
    $variables['theme_path'] = drupal_get_path('theme', $theme);
    $variables['base_path'] = base_path();
}

/**
 * Implements template_preprocess_page().
 */
function thegobeliners_preprocess_page(&$variables)
{
    $theme = \Drupal::theme()->getActiveTheme()->getName();
    $variables['theme_path'] = drupal_get_path('theme', $theme);
    $variables['base_path'] = base_path();

    /** @var $variables ['user'] \Drupal\Core\Session\ */
    $variables['user'] = \Drupal::currentUser()->getAccount();
    $variables['username'] = \Drupal::currentUser()->getAccount()->getDisplayName();
}

/**
 * Implements template_preprocess_field().
 */
function thegobeliners_preprocess_field(&$variables)
{
    if ($variables['element']['#field_name'] == "created") {
        preg_match("`([0-9]{2}/[0-9]{2}/[0-9]{4})`", $variables['element'][0]['#markup'], $date);
        preg_match("`([0-9]{2}:[0-9]{2})`", $variables['element'][0]['#markup'], $hour);

        $date = date_create_from_format('d/m/Y H:i', $date[0] . " " . $hour[0]);
        $now = new DateTime();
        $diff = date_diff($date, $now);

        $d = "";

        if ($diff->y > 0) {
            $d = $diff->y . " année";

            if ($diff->y > 1) {
                $d .= "s";
            }
        } elseif ($diff->m > 0) {
            $d = $diff->m . " mois";
        } elseif ($diff->d > 0) {
            $d = $diff->d . " jour";

            if ($diff->d > 1) {
                $d .= "s";
            }
        } elseif ($diff->h > 0) {
            $d = $diff->h . " heure";

            if ($diff->h > 1) {
                $d .= "s";
            }
        } elseif ($diff->i > 0) {
            $d = $diff->i . " minute";

            if ($diff->i > 1) {
                $d .= "s";
            }
        } elseif ($diff->s > 0) {
            $d = $diff->s . " seconde";

            if ($diff->s > 1) {
                $d .= "s";
            }
        }

        if ($d != "") {
            $variables['my_var'] = "Posté il y à " . $d;
        } else {
            $variables['my_var'] = $variables['element'][0]['#markup'];
        }
    }

    if ($variables['element']['#field_name'] == "field_date_event") {
        preg_match("`([0-9]{2})`", $variables['element'][0]['#text'], $day);
        preg_match("`([a-z]+)`", $variables['element'][0]['#text'], $month);

        $variables['my_var'] = "<span>" . $day[0] . "</span><br>" . $month[0];
    }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function thegobeliners_preprocess_file_link(&$variables)
{
    // Add target _blank attribute to all file links.

    $file = $variables['file'];
    $url = file_create_url($file->uri->value);

    // Use the description as the link text if available.
    if (empty($variables['description'])) {
        $link_text = $file->filename->value;
    } else {
        $link_text = $variables['description']->__toString();
    }

    $link = '<a href="' . $url . '" type="' . $file->filemime->value . '" length="' . $file->filesize->value . '" title="' . \Drupal\Component\Utility\Html::escape($file->filename->value) . '" target="_blank">' . \Drupal\Component\Utility\Html::escape($link_text) . '</a>';
    $variables['link']->setGeneratedLink($link);
}

/**
 * Implements hook_form_alter()
 */
function thegobeliners_form_views_exposed_form_alter(array &$form)
{
    if ($form['#id'] == 'views-exposed-form-logements-liste') {
        $form['field_prix_value']['min']['#attributes']['placeholder'] = "Prix min";
        unset($form['field_prix_value']['min']['#title']);

        $form['field_prix_value']['max']['#attributes']['placeholder'] = "Prix max";
        unset($form['field_prix_value']['max']['#title']);

        $form['field_surface_value']['min']['#attributes']['placeholder'] = "m² min";
        unset($form['field_surface_value']['min']['#title']);

        $form['field_surface_value']['max']['#attributes']['placeholder'] = "m² max";
        unset($form['field_surface_value']['max']['#title']);

        $form['field_type_de_logement_target_id']['#options']['All'] = "Type de logement";
        unset($form['#info']['filter-field_type_de_logement_target_id']['label']);

        $form['field_secteur_geographique_target_id']['#options']['All'] = "Secteurs";
        unset($form['#info']['filter-field_secteur_geographique_target_id']['label']);
    }

    if ($form['#id'] == 'views-exposed-form-actualites-liste') {
        $form['type']['#options']['All'] = "<span class='icon-eye'></span>Tout afficher";
        $form['type']['#options']['evenement'] = "<span class='icon-evenement'></span>Tous les Evénements";
        $form['type']['#options']['travaux'] = "<span class='icon-travaux'></span>Tous les Travaux";
    }
}

/**
 * Implements template_preprocess_node().
 */
function thegobeliners_preprocess_node(&$variables)
{
}

/**
 * Implements template_preprocess_views_view().
 */
function thegobeliners_preprocess_views_view(&$variables)
{
    $variables['get_type'] = $_GET['type'];
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function thegobeliners_theme_suggestions_page_alter(&$suggestions, $variables)
{
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
        $content_type = $node->bundle();
        $suggestions[] = 'page__'.$content_type;
    }

    $route_name = Drupal::routeMatch()->getRouteName();
    $http_error_suggestions = [
        'system.403' => 'page__403',
        'system.404' => 'page__404',
        'search404.page' => 'page__search',
    ];

    if (isset($http_error_suggestions[$route_name])) {
        $suggestions[] = $http_error_suggestions[$route_name];
    }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function thegobeliners_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables)
{
    $term = $variables['elements']['#taxonomy_term'];
    $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
    $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function thegobeliners_theme_suggestions_region_alter(array &$suggestions, array $variables)
{
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
        $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['elements']['#region'] . '__node__' . $node->getType();
    }

    if ($term = \Drupal::routeMatch()->getParameter('taxonomy_term')) {
        $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['elements']['#region'] . '__term__' . $term->bundle();
    }

    if ($webform = \Drupal::routeMatch()->getParameter('webform')) {
        $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['elements']['#region'] . '__webform__' . $webform->id();
    }

    $view_id = \Drupal::routeMatch()->getParameter('view_id');
    $display_id = \Drupal::routeMatch()->getParameter('display_id');
    if (!empty($view_id) && !empty($display_id)) {
        $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['elements']['#region'] . '__view__' . $view_id . '__' . $display_id;
    }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 */
function thegobeliners_theme_suggestions_container_alter(array &$suggestions, array $variables)
{
    $array = [
        'views_view_unformatted__agenda__liste',
        'views_view_unformatted__actualites__liste'
    ];

    if (count(array_diff($array, $variables['element'][0]['#theme'])) == 0) {
        $suggestions[] = 'container__custom';
    }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function thegobeliners_theme_suggestions_alter(array &$suggestions, array $variables, $hook)
{
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function thegobeliners_form_contact_message_feedback_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
}

/**
 * Implements hook_form_alter()
 */
function thegobeliners_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
}

/**
 * Implements template_preprocess_user().
 *
 * Prepares variables for user templates.
 * Default template: user.html.twig.
 */
function thegobeliners_preprocess_user(&$variables)
{
}

/**
 * Implements template_preprocess_block().
 */
function thegobeliners_preprocess_block(&$vars)
{
}

/**
 * Implements .
 */
function thegobeliners_page_attachments_alter(&$build)
{
}

/**
 * Implements .
 */
function thegobeliners_textfield($variables)
{
}
